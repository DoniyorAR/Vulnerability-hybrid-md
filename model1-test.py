import pandas as pd
from transformers import BertTokenizer, BertForSequenceClassification
from torch.utils.data import DataLoader
import torch

class CustomDataset(Dataset):
    def __init__(self, texts, tokenizer, max_len):
        self.texts = texts
        self.tokenizer = tokenizer
        self.max_len = max_len
    
    def __len__(self):
        return len(self.texts)
    
    def __getitem__(self, item):
        text = str(self.texts[item])

        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=self.max_len,
            return_token_type_ids=False,
            padding='max_length',
            return_attention_mask=True,
            return_tensors='pt',
            truncation=True,
        )

        return {
            'text': text,
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
        }

def evaluate(model, data_loader, device):
    model = model.eval()

    texts = []
    predictions = []

    with torch.no_grad():
        for d in data_loader:
            input_ids = d["input_ids"].to(device)
            attention_mask = d["attention_mask"].to(device)
            outputs = model(input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs.logits, dim=1)
            
            texts.extend(d['text'])
            predictions.extend(preds.cpu().numpy())

    return texts, predictions

def main():
    # Load the dataset
    df = pd.read_csv('data.csv')
    
    # Tokenizer
    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
    
    # Dataset and DataLoader
    test_dataset = CustomDataset(
        texts=df['text'].to_list(),
        tokenizer=tokenizer,
        max_len=256
    )
    test_loader = DataLoader(test_dataset, batch_size=16, num_workers=2)

    # Load the model
    model = BertForSequenceClassification.from_pretrained('model1_weights')
    model.to('cuda')

    # Evaluate the model
    texts, predictions = evaluate(model, test_loader, 'cuda')

    print(predictions)

if __name__ == "__main__":
    main()
