import pandas as pd
from sklearn.model_selection import train_test_split
from transformers import BertTokenizer, BertForSequenceClassification, AdamW
from torch.utils.data import DataLoader, Dataset
import torch

class CustomDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len
    
    def __len__(self):
        return len(self.texts)
    
    def __getitem__(self, item):
        text = str(self.texts[item])
        label = self.labels[item]

        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=self.max_len,
            return_token_type_ids=False,
            padding='max_length',
            return_attention_mask=True,
            return_tensors='pt',
            truncation=True,
        )

        return {
            'text': text,
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

def train_epoch(model, data_loader, loss_fn, optimizer, device, n_examples):
    model = model.train()
    losses = []
    correct_predictions = 0

    for d in data_loader:
        input_ids = d["input_ids"].to(device)
        attention_mask = d["attention_mask"].to(device)
        labels = d["labels"].to(device)

        outputs = model(
            input_ids=input_ids,
            attention_mask=attention_mask,
            labels=labels
        )
        
        _, preds = torch.max(outputs.logits, dim=1)
        loss = outputs.loss

        correct_predictions += torch.sum(preds == labels)
        losses.append(loss.item())

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    return correct_predictions.double() / n_examples, sum(losses) / len(losses)

def main():
    # Load the dataset
    df = pd.read_csv('data.csv')
    df_train, df_test = train_test_split(df, test_size=0.1, random_state=42)
    
    # Tokenizer
    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
    
    # Dataset and DataLoader
    train_dataset = CustomDataset(
        texts=df_train['text'].to_list(),
        labels=df_train['label'].to_list(),
        tokenizer=tokenizer,
        max_len=256
    )
    train_loader = DataLoader(train_dataset, batch_size=16, num_workers=2)

    # Model
    model = BertForSequenceClassification.from_pretrained('bert-base-uncased')
    model.to('cuda')

    # Optimizer
    optimizer = AdamW(model.parameters(), lr=2e-5)

    # Loss function
    loss_fn = torch.nn.CrossEntropyLoss().to('cuda')

    # Train the model
    train_acc, train_loss = train_epoch(
        model,
        train_loader,
        loss_fn,
        optimizer,
        'cuda',
        len(df_train)
    )

    print(f"Training accuracy: {train_acc}, Training loss: {train_loss}")

    # Save the model weights
    model.save_pretrained('model1_weights')

if __name__ == "__main__":
    main()
