import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.model_selection import train_test_split

def load_predictions(file_path):
    """
    Load model prediction probabilities from a CSV file.
    Assumes there's a column 'vulnerable_prob' with the probability of being vulnerable.
    """
    df = pd.read_csv(file_path)
    return df['vulnerable_prob'].values

def load_labels(file_path):
    """
    Load actual labels from a CSV file.
    Assumes there's a column 'label' with binary labels.
    """
    df = pd.read_csv(file_path)
    return df['label'].values

def train_logistic_regression(features, labels):
    """
    Train a logistic regression model using the provided features and labels.
    Returns the trained model.
    """
    model = LogisticRegression()
    model.fit(features, labels)
    return model

def evaluate_model(model, features, labels):
    """
    Evaluate the given model using the provided features and labels.
    Returns a dictionary with accuracy, F1-score, precision, and recall.
    """
    predictions = model.predict(features)
    scores = {
        'Accuracy': accuracy_score(labels, predictions),
        'F1 Score': f1_score(labels, predictions),
        'Precision': precision_score(labels, predictions),
        'Recall': recall_score(labels, predictions)
    }
    return scores

def main():
    # Load predictions from both models
    model1_probs = load_predictions('model1_predictions.csv')
    model2_probs = load_predictions('model2_predictions.csv')

    # Combine the predictions into a single feature set
    features = np.column_stack((model1_probs, model2_probs))

    # Load actual labels
    labels = load_labels('labels.csv')

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

    # Train the logistic regression model
    model = train_logistic_regression(X_train, y_train)

    # Evaluate the model on the test set
    evaluation_results = evaluate_model(model, X_test, y_test)

    # Print the evaluation results
    print("Model Evaluation Results:")
    for metric, value in evaluation_results.items():
        print(f"{metric}: {value:.4f}")

if __name__ == "__main__":
    main()
