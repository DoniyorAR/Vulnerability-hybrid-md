import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split

def load_data(filename):
    """
    Load data from a CSV file and return it as a DataFrame.
    """
    return pd.read_csv(filename)

def preprocess_data(df, text_columns):
    """
    Generic data preprocessing function that could be expanded to include more specific tasks.
    Currently, it trims whitespace from string columns specified in `text_columns`.
    """
    for col in text_columns:
        df[col] = df[col].apply(lambda x: x.strip() if isinstance(x, str) else x)
    return df

def split_data(features, labels, test_size=0.2, random_state=42):
    """
    Split data into training and testing sets.
    """
    return train_test_split(features, labels, test_size=test_size, random_state=random_state)

def compute_metrics(actual, predicted):
    """
    Compute and return various performance metrics.
    """
    accuracy = accuracy_score(actual, predicted)
    precision = precision_score(actual, predicted, average='binary')
    recall = recall_score(actual, predicted, average='binary')
    f1 = f1_score(actual, predicted, average='binary')
    return {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1_score': f1
    }

def print_metrics(metrics):
    """
    Print the evaluation metrics in a formatted way.
    """
    for key, value in metrics.items():
        print(f"{key.capitalize()}: {value:.4f}")

def save_predictions(predictions, filename):
    """
    Save predictions to a CSV file.
    """
    pd.DataFrame(predictions).to_csv(filename, index=False)

def load_model_predictions(filename):
    """
    Load model predictions from a CSV file.
    """
    return pd.read_csv(filename)['predicted_safety'].values
